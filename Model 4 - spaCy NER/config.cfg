[paths]
train = "data/train.spacy"
dev = "data/valid.spacy"
vectors = null
init_tok2vec = null

[system]
gpu_allocator = "pytorch"
seed = 546

[nlp]
lang = "en"
pipeline = ["tok2vec","ner"]
batch_size = 1000
disabled = []
before_creation = null
after_creation = null
after_pipeline_creation = null
tokenizer = {"@tokenizers":"spacy.Tokenizer.v1"}
vectors = {"@vectors":"spacy.Vectors.v1"}

[components]

[components.ner]
factory = "ner"
incorrect_spans_key = null
moves = null
scorer = {"@scorers":"spacy.ner_scorer.v1"}
update_with_oracle_cut_size = 100

[components.ner.model]
@architectures = "spacy.TransitionBasedParser.v2"
state_type = "ner"
extra_state_tokens = false
hidden_width = 64
maxout_pieces = 2
use_upper = true
nO = null

[components.ner.model.tok2vec]
@architectures = "spacy.Tok2VecListener.v1"
width = ${components.tok2vec.model.encode.width}
upstream = "*"

[components.tok2vec]
factory = "tok2vec"

[components.tok2vec.model]
@architectures = "spacy.Tok2Vec.v2"

[components.tok2vec.model.embed]
@architectures = "spacy.MultiHashEmbed.v2"
width = ${components.tok2vec.model.encode.width}
attrs = ["NORM","PREFIX","SUFFIX","SHAPE"]
rows = [5000,1000,2500,2500]
include_static_vectors = false

[components.tok2vec.model.encode]
@architectures = "spacy.MaxoutWindowEncoder.v2"
width = 96
depth = 4
window_size = 1
maxout_pieces = 3

[corpora]

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
max_length = 0
gold_preproc = false
limit = 0
augmenter = null

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
max_length = 0
gold_preproc = false
limit = 0
augmenter = null

[training]
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
seed = ${system.seed}
gpu_allocator = ${system.gpu_allocator}
# HYPERPARAMETER: The dropout rate controls the amount of regularization during training, preventing overfitting by randomly setting a fraction of input units to 0 at each update.
dropout = 0.1
# HYPERPARAMETER: Determines how many gradients to accumulate before updating model weights. Useful for effectively increasing batch size when limited by GPU memory.
accumulate_gradient = 3
# HYPERPARAMETER: Number of evaluation steps with no improvement after which training will be stopped, for early stopping.
patience = 1600
# HYPERPARAMETER: Sets the maximum number of training epochs. Limits training time and helps prevent overfitting.
max_epochs = 30
# HYPERPARAMETER: Maximum number of update steps. Another way to control the duration of training.
max_steps = 20000
# HYPERPARAMETER: How often to evaluate the model on the development set. Affects training speed and monitoring of model performance.
eval_frequency = 200
frozen_components = []
annotating_components = []
before_to_disk = null
before_update = null

[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = false
# HYPERPARAMETER: Used in batch size calculation to allow for some variability in batch size, affecting memory usage and potentially training stability.
tolerance = 0.2
get_length = null

[training.batcher.size]
@schedules = "compounding.v1"
# HYPERPARAMETER: Initial batch size for the compounding batch size scheduler.
start = 100
# HYPERPARAMETER: Maximum batch size for the compounding batch size scheduler.
stop = 1000
# HYPERPARAMETER: Factor for compounding batch size increase per iteration, controlling how quickly the batch size grows.
compound = 1.001
t = 0.0

[training.logger]
@loggers = "spacy.ConsoleLogger.v1"
progress_bar = false

[training.optimizer]
@optimizers = "Adam.v1"
beta1 = 0.9
beta2 = 0.999
L2_is_weight_decay = true
L2 = 0.01
grad_clip = 1.0
use_averages = false
eps = 0.00000001
# HYPERPARAMETER: The learning rate controls how much to update the model in response to the estimated error each time the model weights are updated. Crucial for convergence speed and quality.
learn_rate = 0.01

[training.score_weights]
ents_f = 1.0
ents_p = 0.0
ents_r = 0.0
ents_per_type = null

[pretraining]

[initialize]
vectors = ${paths.vectors}
init_tok2vec = ${paths.init_tok2vec}
vocab_data = null
lookups = null
before_init = null
after_init = null

[initialize.components]

[initialize.tokenizer]